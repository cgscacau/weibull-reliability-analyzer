"""
P√°gina de Guia de Preenchimento
"""
import streamlit as st
import pandas as pd
import io

st.set_page_config(
    page_title="Guia de Preenchimento - WRA",
    page_icon="üìù",
    layout="wide"
)

st.title("üìù Guia de Preenchimento de Dados")

st.markdown("""
Este guia detalha como preparar seus dados para an√°lise de Weibull. 
Siga estas instru√ß√µes para garantir resultados precisos e confi√°veis.
""")

st.markdown("---")

# Estrutura B√°sica
with st.expander("**üìã ESTRUTURA B√ÅSICA DOS DADOS**", expanded=True):
    st.markdown("""
    ### Formato Tabular
    
    Seus dados devem estar organizados em **formato de tabela** (planilha), onde:
    - Cada **linha** representa um equipamento ou observa√ß√£o
    - Cada **coluna** representa uma vari√°vel (tempo, status, ID, etc.)
    - A **primeira linha** cont√©m os nomes das colunas (cabe√ßalho)
    
    ### Colunas Necess√°rias
    
    **Obrigat√≥ria:**
    1. **Tempo at√© Falha** - Tempo de opera√ß√£o at√© falha ou censura
    
    **Opcionais (mas recomendadas):**
    2. **Status** - Indica se houve falha (1) ou censura (0)
    3. **Identifica√ß√£o** - ID √∫nico do equipamento
    """)
    
    # Exemplo visual
    st.markdown("### ‚úÖ Exemplo de Estrutura Correta")
    
    example_data = pd.DataFrame({
        'tempo': [150, 230, 180, 310, 275, 420, 195, 380, 290, 165],
        'status': [1, 1, 0, 1, 1, 1, 1, 0, 1, 1],
        'equipamento': ['EQ-001', 'EQ-002', 'EQ-003', 'EQ-004', 'EQ-005',
                       'EQ-006', 'EQ-007', 'EQ-008', 'EQ-009', 'EQ-010']
    })
    
    st.dataframe(example_data, use_container_width=True)
    
    st.caption("""
    **Legenda:**
    - `tempo`: Horas de opera√ß√£o
    - `status`: 1 = falhou, 0 = ainda operando (censurado)
    - `equipamento`: Identificador √∫nico
    """)

# Coluna de Tempo
with st.expander("**‚è±Ô∏è COLUNA DE TEMPO AT√â FALHA**"):
    st.markdown("""
    ### Nomes Aceitos
    
    O aplicativo reconhece automaticamente estes nomes (n√£o diferencia mai√∫sculas):
    
    **Portugu√™s:**
    - `tempo`
    - `horas`
    - `tempo_falha`
    - `tempo_ate_falha`
    
    **Ingl√™s:**
    - `time`
    - `hours`
    - `failure_time`
    - `time_to_failure`
    
    ### Formato dos Valores
    
    **‚úÖ Valores Aceitos:**
    - N√∫meros positivos: `150`, `230.5`, `1500`
    - Inteiros ou decimais
    - Separador decimal: ponto (`.`) ou v√≠rgula (`,`)
    
    **‚ùå Valores N√ÉO Aceitos:**
    - N√∫meros negativos: `-50`
    - Texto: `"cento e cinquenta"`
    - Datas: `01/01/2024`
    - C√©lulas vazias (ser√£o removidas)
    
    ### Unidades de Tempo
    
    **Escolha a unidade apropriada:**
    
    | Unidade | Quando Usar | Exemplo |
    |---------|-------------|---------|
    | Horas | Opera√ß√£o cont√≠nua | Motores, compressores |
    | Dias | Uso di√°rio | Equipamentos de processo |
    | Semanas/Meses | Uso intermitente | Equipamentos de backup |
    | Anos | An√°lise de garantia | Produtos de consumo |
    | Ciclos | Opera√ß√£o c√≠clica | V√°lvulas, atuadores |
    | Quil√¥metros | Equipamentos m√≥veis | Ve√≠culos, correias |
    
    **Importante:** Seja consistente! Todos os valores devem estar na mesma unidade.
    
    ### Exemplos Pr√°ticos
    
    **Exemplo 1: Bombas industriais**
    ```
    tempo (horas de opera√ß√£o)
    1250
    2340
    1890
    3120
    ```
    
    **Exemplo 2: Ve√≠culos**
    ```
    tempo (quil√¥metros rodados)
    45000
    67500
    52000
    81000
    ```
    
    **Exemplo 3: V√°lvulas**
    ```
    tempo (ciclos de abertura/fechamento)
    15000
    23000
    18500
    29000
    ```
    """)

# Coluna de Status
with st.expander("**üîÑ COLUNA DE STATUS/CENSURA**"):
    st.markdown("""
    ### Nomes Aceitos
    
    **Portugu√™s:**
    - `status`
    - `censura`
    - `evento`
    - `falha`
    
    **Ingl√™s:**
    - `status`
    - `censored`
    - `event`
    - `failure`
    
    ### Valores Permitidos
    
    **Codifica√ß√£o padr√£o:**
    - `1` = **Falha observada** (evento ocorreu)
    - `0` = **Censurado** (equipamento ainda operando ou removido sem falha)
    
    **Outras codifica√ß√µes aceitas:**
    - `"sim"` / `"n√£o"`
    - `"true"` / `"false"`
    - `"falha"` / `"censura"`
    
    O aplicativo converte automaticamente para 0 e 1.
    
    ### O que √© Censura?
    
    **Censura √† direita (mais comum):**
    - Equipamento ainda est√° operando
    - Teste foi interrompido antes da falha
    - Equipamento foi removido preventivamente
    
    **Exemplo:**
    ```
    Equipamento A: Operou 1500h e falhou ‚Üí status = 1
    Equipamento B: Operou 2000h e ainda funciona ‚Üí status = 0
    Equipamento C: Operou 1800h e foi substitu√≠do preventivamente ‚Üí status = 0
    ```
    
    ### Quando N√£o H√° Coluna de Status
    
    Se voc√™ **n√£o incluir** esta coluna:
    - O aplicativo assume que **todos os dados s√£o falhas** (status = 1)
    - Isso √© OK se voc√™ s√≥ tem dados de falhas
    - Mas voc√™ perde informa√ß√£o valiosa de equipamentos censurados
    
    **Recomenda√ß√£o:** Sempre inclua dados censurados quando dispon√≠veis!
    
    ### Benef√≠cios de Incluir Censura
    
    ‚úÖ **Aproveita todos os dados dispon√≠veis**
    - Equipamentos que n√£o falharam ainda t√™m informa√ß√£o √∫til
    
    ‚úÖ **Resultados mais precisos**
    - Intervalos de confian√ßa mais estreitos
    - Estimativas menos enviesadas
    
    ‚úÖ **An√°lise mais realista**
    - Reflete a popula√ß√£o real de equipamentos
    
    ### Exemplo Completo
    
    ```csv
    tempo,status,equipamento
    1250,1,Bomba-01    # Falhou em 1250h
    2340,0,Bomba-02    # Ainda operando ap√≥s 2340h
    1890,1,Bomba-03    # Falhou em 1890h
    3120,0,Bomba-04    # Removida preventivamente em 3120h
    2750,1,Bomba-05    # Falhou em 2750h
    ```
    """)

# Coluna de Identifica√ß√£o
with st.expander("**üè∑Ô∏è COLUNA DE IDENTIFICA√á√ÉO (OPCIONAL)**"):
    st.markdown("""
    ### Nomes Aceitos
    
    **Portugu√™s:**
    - `equipamento`
    - `id`
    - `ativo`
    - `identificacao`
    
    **Ingl√™s:**
    - `equipment`
    - `id`
    - `asset`
    - `identifier`
    
    ### Formato dos Valores
    
    **Pode ser:**
    - Texto: `"Bomba-01"`, `"Motor-A"`, `"EQ-12345"`
    - N√∫mero: `1`, `2`, `3`, ...
    - C√≥digo alfanum√©rico: `"A1B2C3"`, `"2024-001"`
    
    **Requisito:** Cada equipamento deve ter ID √∫nico.
    
    ### Para Que Serve?
    
    A coluna de ID √© **opcional**, mas √∫til para:
    - Rastreabilidade dos dados
    - Identificar equipamentos problem√°ticos
    - Documenta√ß√£o e relat√≥rios
    - An√°lises futuras
    
    **Exemplo:**
    ```csv
    tempo,status,equipamento,localizacao
    1250,1,Bomba-01,Setor-A
    2340,0,Bomba-02,Setor-B
    1890,1,Bomba-03,Setor-A
    ```
    
    Neste exemplo, `localizacao` seria ignorada pelo aplicativo, 
    mas pode ser √∫til para sua pr√≥pria an√°lise.
    """)

# Formatos de Arquivo
with st.expander("**üíæ FORMATOS DE ARQUIVO ACEITOS**"):
    st.markdown("""
    ### CSV (Recomendado)
    
    **Vantagens:**
    - ‚úÖ Formato universal
    - ‚úÖ Leve e r√°pido
    - ‚úÖ Compat√≠vel com qualquer software
    
    **Como criar CSV no Excel:**
    1. Prepare seus dados no Excel
    2. Arquivo ‚Üí Salvar Como
    3. Escolha "CSV (Separado por v√≠rgulas) (*.csv)"
    4. **Importante:** Selecione encoding UTF-8 se dispon√≠vel
    
    **Separadores aceitos:**
    - V√≠rgula (`,`) - padr√£o internacional
    - Ponto-e-v√≠rgula (`;`) - padr√£o brasileiro
    - Tab (`\t`) - menos comum
    - Pipe (`|`) - menos comum
    
    O aplicativo detecta automaticamente o separador.
    
    **Exemplo de CSV:**
    ```
    tempo,status,equipamento
    150,1,EQ-001
    230,1,EQ-002
    180,0,EQ-003
    ```
    
    ### Excel (XLSX, XLS)
    
    **Vantagens:**
    - ‚úÖ Formato familiar
    - ‚úÖ Mant√©m formata√ß√£o
    - ‚úÖ Suporta m√∫ltiplas planilhas
    
    **Dicas:**
    - Use a primeira planilha para os dados
    - Se houver m√∫ltiplas planilhas, voc√™ pode escolher qual usar
    - Evite f√≥rmulas (use apenas valores)
    - N√£o use c√©lulas mescladas
    
    **Estrutura recomendada:**
    - Linha 1: Cabe√ßalhos (nomes das colunas)
    - Linhas 2+: Dados
    - Sem linhas vazias entre dados
    - Sem formata√ß√£o condicional complexa
    
    ### PDF (Experimental)
    
    **Limita√ß√µes:**
    - ‚ö†Ô∏è Apenas tabelas bem formatadas
    - ‚ö†Ô∏è Pode n√£o funcionar com PDFs complexos
    - ‚ö†Ô∏è Requer Java instalado (no servidor)
    
    **Recomenda√ß√£o:** Converta PDF para CSV ou Excel antes.
    
    **Se precisar usar PDF:**
    - Certifique-se que √© uma tabela simples
    - Sem c√©lulas mescladas
    - Texto selecion√°vel (n√£o imagem)
    """)

# Boas Pr√°ticas
with st.expander("**‚ú® BOAS PR√ÅTICAS E DICAS**"):
    st.markdown("""
    ### Prepara√ß√£o dos Dados
    
    **‚úÖ FA√áA:**
    
    1. **Organize seus dados antes de importar**
       - Remova linhas e colunas desnecess√°rias
       - Verifique se n√£o h√° c√©lulas vazias nos dados
    
    2. **Use nomes de colunas claros**
       - Preferencialmente em portugu√™s ou ingl√™s
       - Sem caracteres especiais (evite: √£, √ß, @, #, etc.)
       - Sem espa√ßos (use underscore: `tempo_falha`)
    
    3. **Verifique os dados**
       - Sem valores negativos em tempo
       - Status √© 0 ou 1
       - Todos na mesma unidade de tempo
    
    4. **Documente suas premissas**
       - Qual unidade de tempo usou
       - Como tratou censura
       - Quais dados foram exclu√≠dos e por qu√™
    
    5. **Mantenha backup dos dados originais**
       - Antes de qualquer limpeza
       - Para auditoria e rastreabilidade
    
    **‚ùå EVITE:**
    
    1. **Misturar diferentes popula√ß√µes**
       - N√£o misture tipos de equipamentos diferentes
       - N√£o misture condi√ß√µes operacionais diferentes
    
    2. **Incluir dados duvidosos**
       - Se n√£o tem certeza, exclua
       - Melhor ter menos dados confi√°veis que muitos duvidosos
    
    3. **Remover outliers sem investigar**
       - Outliers podem ser falhas reais importantes
       - Investigue antes de remover
    
    4. **Esquecer de documentar**
       - Sempre anote decis√µes tomadas
       - Explique tratamento de dados especiais
    
    ### Quantidade de Dados
    
    **M√≠nimos recomendados:**
    
    | Situa√ß√£o | M√≠nimo | Ideal |
    |----------|--------|-------|
    | An√°lise preliminar | 5 falhas | 10+ falhas |
    | An√°lise operacional | 10 falhas | 20+ falhas |
    | An√°lise formal/cr√≠tica | 20 falhas | 30+ falhas |
    | Pesquisa/publica√ß√£o | 30 falhas | 50+ falhas |
    
    **Lembre-se:** Mais dados = resultados mais confi√°veis!
    
    ### Checklist Antes de Importar
    
    - [ ] Dados est√£o em formato tabular (linhas e colunas)
    - [ ] Primeira linha cont√©m nomes das colunas
    - [ ] Coluna de tempo est√° presente e com valores positivos
    - [ ] Coluna de status (se aplic√°vel) tem valores 0 ou 1
    - [ ] N√£o h√° c√©lulas vazias nos dados importantes
    - [ ] Todos os tempos est√£o na mesma unidade
    - [ ] Arquivo est√° em formato aceito (CSV, Excel, PDF)
    - [ ] Nome do arquivo n√£o tem caracteres especiais
    - [ ] Tenho backup dos dados originais
    """)

# Templates
st.markdown("---")
st.subheader("üì• Templates e Exemplos")

st.markdown("""
Baixe templates prontos para come√ßar rapidamente:
""")

col1, col2, col3 = st.columns(3)

with col1:
    st.markdown("### üìÑ Template B√°sico")
    
    # Cria template b√°sico
    template_basic = pd.DataFrame({
        'tempo': [150, 230, 180, 310, 275],
        'status': [1, 1, 0, 1, 1],
        'equipamento': ['EQ-001', 'EQ-002', 'EQ-003', 'EQ-004', 'EQ-005']
    })
    
    csv_basic = template_basic.to_csv(index=False)
    st.download_button(
        label="‚¨áÔ∏è Baixar Template B√°sico (CSV)",
        data=csv_basic,
        file_name="template_basico_weibull.csv",
        mime="text/csv"
    )
    
    st.caption("Apenas colunas essenciais")

with col2:
    st.markdown("### üìä Template Completo")
    
    # Cria template completo
    template_full = pd.DataFrame({
        'tempo': [150, 230, 180, 310, 275, 420, 195, 380, 290, 165],
        'status': [1, 1, 0, 1, 1, 1, 1, 0, 1, 1],
        'equipamento': ['EQ-001', 'EQ-002', 'EQ-003', 'EQ-004', 'EQ-005',
                       'EQ-006', 'EQ-007', 'EQ-008', 'EQ-009', 'EQ-010'],
        'localizacao': ['Setor-A', 'Setor-B', 'Setor-A', 'Setor-C', 'Setor-B',
                       'Setor-A', 'Setor-C', 'Setor-B', 'Setor-A', 'Setor-C']
    })
    
    csv_full = template_full.to_csv(index=False)
    st.download_button(
        label="‚¨áÔ∏è Baixar Template Completo (CSV)",
        data=csv_full,
        file_name="template_completo_weibull.csv",
        mime="text/csv"
    )
    
    st.caption("Com colunas adicionais")

with col3:
    st.markdown("### üìà Dados de Exemplo")
    
    # Cria dados de exemplo realistas
    np.random.seed(42)
    beta_ex = 2.5
    eta_ex = 1000
    n_samples = 30
    
    times_ex = eta_ex * (-np.log(1 - np.random.rand(n_samples))) ** (1/beta_ex)
    status_ex = np.random.choice([0, 1], size=n_samples, p=[0.2, 0.8])
    
    example_data_full = pd.DataFrame({
        'tempo': times_ex.round(0).astype(int),
        'status': status_ex,
        'equipamento': [f'BOMBA-{i:03d}' for i in range(1, n_samples+1)]
    })
    
    csv_example = example_data_full.to_csv(index=False)
    st.download_button(
        label="‚¨áÔ∏è Baixar Dados de Exemplo (CSV)",
        data=csv_example,
        file_name="exemplo_dados_weibull.csv",
        mime="text/csv"
    )
    
    st.caption("30 amostras realistas")

# Exemplos Espec√≠ficos
st.markdown("---")
st.subheader("üéØ Exemplos por Tipo de Equipamento")

tab1, tab2, tab3 = st.tabs(["‚öôÔ∏è Equipamentos Rotativos", "üîå Eletr√¥nicos", "üöó Ve√≠culos"])

with tab1:
    st.markdown("""
    ### Equipamentos Rotativos (Bombas, Motores, Compressores)
    
    **Unidade recomendada:** Horas de opera√ß√£o
    
    **Exemplo de dados:**
    """)
    
    rotating_example = pd.DataFrame({
        'horas_operacao': [8750, 12340, 9890, 15120, 11275, 18420, 10195],
        'status': [1, 1, 0, 1, 1, 1, 0],
        'equipamento': ['BOMBA-01', 'MOTOR-02', 'COMP-03', 'BOMBA-04', 
                       'MOTOR-05', 'COMP-06', 'BOMBA-07'],
        'tipo_falha': ['Rolamento', 'Enrolamento', 'N/A', 'Selo mec√¢nico',
                      'Rolamento', 'V√°lvula', 'N/A']
    })
    
    st.dataframe(rotating_example, use_container_width=True)

with tab2:
    st.markdown("""
    ### Equipamentos Eletr√¥nicos
    
    **Unidade recomendada:** Horas de uso ou Ciclos liga/desliga
    
    **Exemplo de dados:**
    """)
    
    electronic_example = pd.DataFrame({
        'horas_uso': [2450, 3890, 1920, 5230, 4180],
        'status': [1, 0, 1, 1, 0],
        'equipamento': ['PLC-001', 'PLC-002', 'PLC-003', 'PLC-004', 'PLC-005'],
        'ambiente': ['Industrial', 'Escrit√≥rio', 'Industrial', 'Industrial', 'Escrit√≥rio']
    })
    
    st.dataframe(electronic_example, use_container_width=True)

with tab3:
    st.markdown("""
    ### Ve√≠culos e Equipamentos M√≥veis
    
    **Unidade recomendada:** Quil√¥metros ou Horas de motor
    
    **Exemplo de dados:**
    """)
    
    vehicle_example = pd.DataFrame({
        'quilometros': [125000, 89000, 156000, 203000, 178000],
        'status': [1, 0, 1, 1, 0],
        'veiculo': ['CAMINHAO-01', 'CAMINHAO-02', 'CAMINHAO-03', 
                   'CAMINHAO-04', 'CAMINHAO-05'],
        'componente': ['Transmiss√£o', 'N/A', 'Motor', 'Embreagem', 'N/A']
    })
    
    st.dataframe(vehicle_example, use_container_width=True)

# Valida√ß√£o Final
st.markdown("---")
st.subheader("‚úÖ Valida√ß√£o Final")

st.info("""
**Antes de fazer upload, verifique:**

1. ‚úÖ Seus dados seguem a estrutura recomendada
2. ‚úÖ Coluna de tempo tem apenas valores positivos
3. ‚úÖ Coluna de status (se presente) tem apenas 0 e 1
4. ‚úÖ N√£o h√° c√©lulas vazias nos dados importantes
5. ‚úÖ Arquivo est√° em formato aceito (CSV preferencial)
6. ‚úÖ Voc√™ tem pelo menos 5 falhas (idealmente 10+)
7. ‚úÖ Todos os tempos est√£o na mesma unidade
8. ‚úÖ Voc√™ documentou suas premissas e decis√µes

**Pronto para come√ßar?** V√° para [An√°lise Principal](An√°lise_Principal) e fa√ßa o upload!
""")
